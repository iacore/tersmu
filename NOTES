First goal: handle the "first order fragment" of lojban

(Note to reader: what follows is largely stream-of-consciousness, extended
over many months. Don't expect consistency, do expect tangents)

Handling quantifiers:
    binding happens where a prenex is or could be, i.e. at 'statement' and at
    'subsentence'.

    This means that an unbound da gets exported to the innermost such prenex,
    and binds just within the corresponding statement/subsentence.

    Handling exportation may be a little complicated... for rather similar
    reasons that handling 'ri' et al will be - the semantics of lojban is
    partly a matter of the partial order of the parse tree, but partly of the
    (cross-level) total order of occurance in the text.

    This actually fits the State Monad approach quite well...

Naive algorithm:
    (Using a monad,) build up a prenex as we parse a statement/subsentence.
    Every time we hit a currently unbound da, or a naku, or a tense/modal, we
    add it to the end of the prenex.

    Problem with this: it doesn't correctly handle the interaction between
    sumti connectives and negation - CLL explicitly states (16.12.10-11) that
    {ge xy gi zy na ku} == {na ku ga xy gi zy}. Presumably tenses and unbound
    da should be handled analogously.

Idea:
    Treat sumti connectives just like quantifiers.
    x .e y broda == \forall z \in {x,y}. z broda == z=(x and y). z broda
    sim
    x .o y broda == z=(x iff y). z broda

    Semantics the obvious ones.

    We could even add such quantifiers to handle termsets.

    So now all is clear.

    We have:
    data QT = Arglist [Obj]
	      | Negation QT
	      | Quantifier Number (Obj -> QT)
	      | Connective TruthTable (Obj -> Obj -> QT)
	      | Tag Tag Ojbect QT
    type QuantifiedTerms = QT
    data TermCxt = {QT::QT, lastFA::Nat}
    Term :: TermCxt -> TermCxt
    
    Actually, this is useless: can't even handle {A .a B .e C .a bo D}.

    Instead, how about we just: have a ComplexSumti type, and have 'term'
    initially return that; then make exporting to the prenex a step which
    comes later. So the initial parsing returns something closely tied to the
    lojban, and the hard work converting that to logic is done separately.

    Remaining complexities:
	{su'o broda be da zo'u} -> {da de poi broda da zo'u}?

	Tenses and modals are of quantificatory nature (sometimes inherently
	(ta'e, ro roi), and always if JA-connected), so should go in the
	prenex.



Handling sumti:
    CLL seems to imply (ignoring masses):
	A sumti is a constant, and refers to one or more individuals
	    ('constant' can't be taken too literally - e.g. we may have a
	    quantified variable as a linkarg in a description sumti)
	poi narrows the referent-set of a sumti
	sumti always appear quantified
	we can consider bound {da} as special - it's a singular variable, so
	    quantifiers on it are meaningless.

	xorlo's modification (ignoring plural predication and Kinds etc):
	    lo has no default quantifier, and when unquantified is magic - it
		acts like it has a universal quantifier with tightest scope.
	    Moreover, {lo broda} refers to only *some* individuals which
		broda, not all.
	    So it acts much like {le} does, but with assertive power.

    Handling this in logic:
	Naive approach:
	    Translate to monadic second order:
		{le broda goi ko'a cu brode ko'a}
		    -> EX X. (describe(FA x\in X. broda(x)) /\
				FA x\in X. FA y\in X. brode(x,y))
		{lo broda goi ko'a cu brode ko'a}
		    -> EX X. (FA x. (broda(x) <-> x\in X) /\
				EX x\in X. FA y\in X. brode(x,y))

	But no need for second-order quantifiers really:
		{le broda goi ko'a cu brode ko'a}
		    -> FA x:(describe(broda(x)). 
			FA y:(describe(broda(y)). brode(x,y)

		{lo broda goi ko'a cu brode ko'a}
		    -> EX x:(broda(x)). FA y:(broda(y)). brode(x,y)

	    So we analyse e.g. {ko'a} as binding to a unary predicate rather
		than the corresponding set.

	    Issues with that:
	     The predicate might involve a bound variable
	      In which case, I suppose anaphora to the sumti should simply be
	      disallowed - or better, allowed only within the scope of the
	      quantifier.
	     The same description might have different referents on different
	     uses, whereas ko'a must bind to a single choice of referents.
	      So maybe second order quantification is necessary for {le} and
	      {voi} after all. So probably also for xorlo. Also for {la}.
	      Given which... is it actually worth the bother to handle {lo}
	      differently? Wouldn't it be better to translate to monadic 2nd
	      order, then have some proof theory which will do the reduction
	      to 1st order if we want it?

	Alternatively:
	 Nothing 2nd order. {le broda} and {la .brod.} are considered
	 *absolute* constants. {ro da le broda be da cu brode} is not allowed,
	 or is equiv to {ro da le broda be de cu brode}.

	 Getting goi working will be painful and monadic.

    Remark: if you think that using xorban style plural predication will make
    any of the above problems go away, think again, recalling that we still
    need to be able to quantify over atoms.
     
Plural semantics:
    Even sticking to CLL, some things seem to make a logic with plural terms
    and variables more natural. The closest things we have to basic terms -
    personal prosumti and le/la-clauses - are plural, and at least many
    anaphoric sumti are plural.

    So maybe we should translate to a plural logic, and from there to FOL by
    distributivity if we want?

    So it seems our intermediate logic would just be FOL with plural terms and
    an among relation? No need even for plural quantifiers?

    So we can actually just use FOL, with some unusual terms.

zo'e:
    Translating {lo broda} to {zo'e noi broda}, and {le} fa'u {voi}, seems
    better than considering it as a constant.

    So we should add zo'e to our logic?

    Can we just consider it as introducing an existential plural quantifier?

    {ro da zo'e} == {zo'e ro da}

    But {da zo'e noi broda da} != {zo'e noi broda da ku'o da}

    Some examples:
	{zo'e se fetsi ro mamta} == {ro mamta cu fetsi zo'e} ==
	{ro mamta cu fetsi da}

    So why not just have it as an *innermost* existential quantifier?

    To handle the 'obvious referents' interpretation of {zo'e} it seems we
    should actually interpret {zo'e} as an existential quantifier with
    tightest scope over a varying glorked domain.
    e.g. {ro da broda zo'e} -> \forall x. \exists y\in C_x. broda(x,y)

    With this definition of {zo'e}, {lo} == {zo'e noi} seems to explain many
    uses of {lo}. Often {lo} gives a Skolem function, corresponding to C_x
    being a singleton, but not always. e.g. if we don't want to resort to
    Kinds, {so'e re'azda cu se xabju lo jukni} really should translate as
    most h:house. \exists s:spider. dwells(s,h)
    (so with the constant glorked domain {s | spider(s)}).

    With multiple {zo'e}s, the domains have to be glorked simultaneously
    before any existential quantification - i.e. it's \exists (x,y) \in C, not
    \exists x\in C. \exists y \in C'_x  .

    This leaves only generics and kinds to deal with. I think my preference is
    to *not* allow {lo} to get at either - require {lo'e} for generics, and
    {lo ka} in place of kinds. But alternatively, we could allow \Gen in place
    of \exists as a possible quantifier for {zo'e}.

    Note that unfilled places often do seem to be generics - e.g. adjectival
    uses of predicates, like {ko'a sutra} or {ko'a jdari}.

Handling descriptions and {zo'e} without really handling them:
    Just leave them as unanalysed terms. The terms will have structure which
    can be used in further analysis, but we consider this beyond the basic
    logic we deal with here.

    Note that the structure will sometimes mention bound variables, e.g. in
    {ro da lo broda be da cu brode}, but that's fine.

    Quantifiers we can handle by quantifying the "among [the term]" predicate.
    
    Relative clauses have I guess to be considered part of the term.

Two-stage interpretation:
    If we're willing to accept {lo} == {zo'e noi}, which I'm currently
	thinking we should be, we can proceed as follows:

    First stage: everything is reduced to predications, in particular worlds,
	of (possibly complicated) selbri with sumti being named entities or
	personal prosumti or bound variables or zo'e expressions (meaning zo'e
	+ relative clauses).

	i.e. we obtain something of type Prop Selbri JboTerm, where JboTerm
	has just those four constructors.

	Anaphora are resolved at this level. For zo'e expressions, anaphora
	bind "in intension" - i.e. to the zo'e clause as a whole; they
	therefore make sense anywhere in the scope of any variables which
	occur bound in the zo'e expression.
	
	(This means that e.g. {ro te cange poi ponse lo xasli cu darxi ri}
	doesn't really work - it becomes equivalent to {ro te cange poi ponse
	lo xasli cu darxi lo xasli}. But nevermind, at least for now.)

	The result of this first stage should be quite human-readable, and the
	derivation from the original text is likely to be fairly transparent.

    Second stage: zo'e expressions are replaced by existential/generic
	quantifiers as appropriate, with domains to be glorked, or (perhaps)
	by property predications. The result may not be so readable.

    Interpreting the final expression in a model (as part of a discourse) is
    potentially rather complicated, due to the glorking required. But we can
    null-glork, letting the domain always be the whole universe.


Quantified zo'e and relative clauses:
    Do the clauses apply to the zo'e itself or to atoms below it?

    ro lo broda poi brode -> (ro (zo'e noi broda)) zi'e poi brode
    but
    ro mi poi broda -> (ro mi) poi broda

    I think we should have this being a difference between poi and noi: poi
    takes only singular variables. {lo broda poi brode} is a type error.

    xorxes on this issue:
    """
    ...we still have a way to differentiate both possibilities, at least for
    the "lo broda ku" type of sumti (not for "ko'a"), because there are three
    different points where a relative clause may be attached: "lo (1) broda
    (2) ku (3)". We could say that when attahed at (2) the restriction occurs
    before singular quantification over referents, and that when attached at
    (3) it occurs as a restriction on the singular quantifier. One problem
    with that is that (2) is the "normal" place of attachment (i.e. with
    elided "ku") and (3) requires an explicit "ku". But I guess it doesn't
    matter too much because in many cases both meanings will agree anyway.
    """


Kinds/properties:
    xorxes wants kinds in the universe, distinct from properties, with
    {lo broda} (and hence {zo'e noi broda}) able to get a kind.

    I think this is evil, for various reasons.

    We can get approximately the same effect by making {lo broda} be ambiguous
    between {zo'e noi broda} and {zo'e noi ka broda}, while keeping zo'e sane.

    So my current favoured solution is to have {zo'e noi} as close-scope
    plural existential with glorked domain, have {lo} as ambiguous between
    {zo'e noi}, {pa ka} and {lo'e}, with {lo'e} being about generics and
    having exact semantics yet to be determined.

    This should be mostly consistent with xorxes' use of {lo}.

    In reality, I would then favour dropping the second two options, such that
    {lo} == {zo'e noi}, and generics and properties have to be marked as such.
    Presumably xorxes (and everyone else?) would be unhappy with that, but
    it's blatantly sensible. We could then go back to using {lo ka} rather
    than {pa ka} without ambiguity.

    But maybe we should think through the tense system and generics before
    making any firm decisions there?

    Note that if it's true that unfilled places can be generics, this would
    mean doing away with the "unfilled place == zo'e" rule, which would be
    painful. An alternative would be to declare generic unfilled places to be
    erroneous - perhaps saying it should be {ko'a selkuclykai}, or
    {ko'a zilselkucli}, rather than {ko'a se kucli}, etc.

Notes on lambdas:
    Currently, we're implementing lambdas expressions directly in Haskell,
    i.e. as function types. In FOL, we're using (Int -> Prop) rather than
    (Term -> Prop), whereas in Lojban.hs we're using (JboTerm -> JboProp).

    The use of Int in the former was to make it possible to do interpretation.

    The problem with using Int for the latter is that we actually do want to 
    apply them to JboTerms.

    But we run into problems when trying to interpret our JboProps - e.g. when
    interpreting tanru.

    Solution: introduce a constructor to Prop:
	    LambdaApp (Int -> Prop r t) t
	which is interpreted in a model in the obvious way - it just adds a
	binding.

    By the way: a monad allowing us to neatly bind a new variable would be
    very helpful.

The big idea:
    We reduce the problem of understanding (a fragment of) lojban to that of
    understanding
	(i) first order logic
	(ii) brivla and cmene and non-anaphoric pro-sumti
	(iii) tanru and NU-selbri
	(iv) zo'e-terms
    More precisely, we interpret a lojban sentence as a proposition in
    first-order logic with the things in (ii)-(iv) as the terms and relations.

    Here, a zo'e-term corresponds to an expression of the form
    {zo'e noi broda} (or just {zo'e}); it has the corresponding unary
    predicate (or nothing) as data.

Handling 'statement':
    Surprisingly painful!

    We want to hold to the rule that we raise quantification and sumti
    connectives to the prenex... so we want to process 'linearly', holding on
    to bindings as we go... so we can't (monadlessly, at least) just recurse
    on the structure of the afterthought connected sentences...

    Eventual realisation: continuations solve the problem.

    We could wrap them in a monad, but I'm not convinced that would be
    clarificatory.

Rethinking anaphora:
    The idea that we can have {lo broda ri} equivalent to {lo broda lo broda}
    is flawed - consider e.g. {mi cpacu lo plise gi'e citka ri}.

    So anaphora are going to let us distinguish between an approach to {lo}
    using kinds and one which strips them out, unless the latter has some
    bizarre rules.

    e.g. what does {lo remna cu prami ri} mean?

loi:
    can be the (mundane) iota operator.

jo'u vs joi:
    {jo'u} could be like {.e}, but expanded after everything else.

    i.e. {ko'a jo'u ko'e da broda} == {da ko'a .e ko'e se broda}

    So formally, it would create a new kind of term, a jo'u-set of bunches,
    predications on which always resolve distributively to predications on the
    constituent bunches.

    Presumably we'd want to declare that
    {ko'a jo'u ko'e joi ko'i} == {ko'a joi ko'i joi ke ko'e joi ko'i} .

New thinking on handling descriptors:
    Handle {lo broda} analogously to unbound {da}: export to outermost scope as
    a glorked Skolem function (which generally is just a constant). So
    {ro broda lo brode cu brodi} -> {GL X:brode(_). FA x:broda(_). brodi(x,X)}
    {ro da lo brode be da cu brodi} -> {GL F:brode(_,\1). FA x:broda(_). brodi(x,F(x))}

    Then there's no issue with anaphora, except where they break through
    prenexes (e.g. in {loi nu ro da loi broda be da ku goi ko'a brode cu brodi
    ko'a}, and between statements) - which probably just shouldn't be allowed.

    {zo'e} we can treat as {lo du}. Or, perhaps better for now, leave as a
    term (but not handling {noi} in any magic way for it).

    Implementing this: looks like we need to pass around another
    continuation...

    Has the time come for a monad? One which simultaneously handles: bindings,
    glorkings and prenex exportation? It seems so.

    But handling Skolem functions seems to be remarkably painful. Note that
    they can in principle be functions not only of explicitly quantified
    things, because we also have e.g. {ti .e ta lo broda be ri cu brode}...

    Remind me what's so good about the Skolem function approach anyway? Why
    not just have a GL quantifier scoping as with {da}? Main issue: negations
    can then scope over the {lo}. So we have something like CLL-lo, but with a
    plural variable. So modulo glorkiness, the same as {pi za'u} ought to be.
    Actually: we could consider this to be correct xorlo, and have the fact
    that it's possible to pull it back out of negations and quantifiers,
    sometimes involving introducing a Skolem function, as being part of the
    semantics of GL.

Semantics of GL:
    We go through plausible bunches, in decreasing order of plausibility,
    until we hit one which makes the statement *as a whole* true. Note that
    this is rather different from a plural existential - we want the whole
    statement to be true, not just the formula below the GL. We even break out
    of abstractions this way.

    This can get unreasonably complicated... consider
    {broda lo ka ro da zo'u ce'u brode lo brodi be da}; the truthiness for a
    given value of {lo brodi} really depends on what's above the {ro da} and
    the {lo ka}... moreover, it probably isn't independent of the values of
    {lo brodi} for other values of {da}.

    So even if we only want to work with finite models, it seems we're forced
    to pass to skolem functions: we go through plausible skolem functions (it
    may be rare that non-constant ones are plausible, but it'll happen). With
    suitable quantifier elimination, we can handle infinite models this way as
    long as we only have finitely many plausible definable families of
    definable skolem functions (one such family being the constant functions).

    Note: it isn't clear to me whether xor{lo} itself is meant to involve
    glorking. Sometimes at least, xorxes seems to talk about it and use it as
    if it was merely giving a plural existential with outermost scope (or an
    existential over skolem functions).

Giving up on gadri:
    Just treat them as uninterpreted quantifiers:
    {broda lo brode ri} -> "{lo} x1:(brode(_)). broda(zo'e,x1,x1)" ;
    for now at least, we leave further processing to the pragmatics module.

    (Yes, this is a complete cop-out)

Questions:
    {ma} needs to get outermost scope: in {ro broda ma brode} or {ko'a .e ko'e
    ma brode}, the only sensible interpretation is that a constant is desired
    as the answer.

    Actually, no. There is a scope-respecting alternative, which is to work
    syntactically. The answer to a {ma} question is a sumti fragment, which is
    evaluated in the scope at which the {ma} occurred - i.e. syntactically
    replacing the {ma} in the question. So e.g. {ro da poi remna cu prami ma}
    could be answered with {lo da mamta}.

    As for {ro da broda xu} - an answer would be something like {ro da go'i
    gi'o brode}.

    I'm not sure about this... what would {broda .ijo xu brode} mean, if only
    the second sentence is questioned? Is the first stated? Or stated iff the
    second is true? I doubt there are coherent answers to such questions.

    The simpler approach is to say that "illocutionary operators" scope over
    the entire statement (or, in the case of du'u, subsentence).

    This doesn't actually rule out {ma}-answers like that above, though - we
    want an answer which makes the statement as a whole true, but that answer
    could be a skolem function. But maybe that's introducing unnecessary
    complexity.

Weak dedonkeyisation:
    A (weak) donkey is a situation of anaphoric reference to something which
    is within (but not bound by) a quantifier of which the anaphor is out of
    scope.

    e.g. {ro da zo'u da broda le brodi .i ri brode} is a weak donkey, and
    {ro da broda .i ri brode} is a strong donkey.

    {la .alis cu verba .i ri ji'a fanza} isn't literally a weak donkey, but
    dealing with it is just as difficult as dealing with the weak donkey
    {da zo'u la .alis cu verba .i ri ji'a fanza}, so let's call these weak
    donkeys too.

    There's no theoretical problem in interpreting weak donkey anaphora
    correctly, so we should.

    Note that {broda ko'a .e ko'e .i ri brode} is effectively a strong donkey.

    How to weakly dedonkify when we do it: probably we should separate out
    binding of {ko'a}, {ri} and letterals from binding of {da} and {ke'a} etc.
    Only the latter exhibit current scope behaviour.

    So we need to complicate our monads.

    We also need to consider how to handle description sumti. {le broda},
    and under xorlo {lo broda}, should be magic. "Magic" could mean "Skolem
    function". I suspect it could also just mean "quantified just within the
    scope of the lowest mentioned variable" (sumti-connectants counting). But
    I suppose Skolem functions are actually a better fit - in an infinite
    model, it's presumably going to interpreted as a definable function. So in
    {PA da poi broda lo brode be da}, we just get "the skolem function
    broda(_) -> brode(_) I expect you to be able to glork". The current
    sentence provides part of the context for the glorker to make use of, but
    nothing formal.

    Clearly anaphora will refer only to a value of this skolem function rather
    than the function itself; the point is just that it will make sense
    everywhere within the scope of the variables/anaphora appearing in the
    description.

    Issue: it isn't really clear, at least to me, whether we need an explicit
    {da} in the description to cause the skolem function to be non-constant
    wrt {da}. I *think* we should, just on the basis that the alternative
    makes excessive cognitive demands.

GOhA:
    Often donkey. e.g. {ro da broda .i go'i} is donkey.

    {broda .i go'i} is *always* weakly donkey.

    Obvious algorithm: process all terms, leaving some jboterms and a
    (possibly complicated, in particular possibly tagged) selbri; assign that
    lot to go'i, with the jboterms effectively becoming linkargs. These
    jboterms will generally be (weakly) donkey when the go'i is used. Note
    that some strong donkeys may be overriden with new terms, and this should
    be supported.

    Problem: bound terms may appear in the selbri itself, in linkargs or NU.
    Donkeys everywhere!

Illocution and scope:
    As with questions, I actually don't see why these shouldn't respect scope.

    So e.g. {pa tricu e'u ko se gapcpare} means "there's one tree I suggest
    you climb", whereas {e'u ko pa tricu gapcpare} means "I suggest you climb
    one tree". Figuring out precisely where the scope of a UI goes is an
    exercise for the author.

    But as with questions, this is probably a bad idea. A
    statement/du'u-subsentence should have a single uniform
    illocutionary force. So the first example above should just be {e'u ko
    gapcpare le pa tricu}.

    (This doesn't get the author out of doing the exercise, though, because it
    does seem reasonable that "modal UI" like {ei} should respect scope.)

    Note that illocution scope is not the same as noi's side-statement scope
    or lo's existential-presupposition scope, because the latter break out
    even of du'u-subsentences.

Handling unquantified terms:
    (amongst which: {la foob}, {mi}, and, at least under xorlo, description
    sumti (arguably CLL description-sumti go via such too))

    These should be understood *before* we get into the "logical" part of the
    parsing - e.g. {ko'a .e ko'e la foob broda} shouldn't be equivalent to
    {ko'a la foob broda .ije ko'e la foob broda}, because we should allow
    Pragmatics to give the two different interpretations in the latter.

    In other words, they are discourse referents. (Note though that, beyond
    giving us this terminology, discourse referent theory appears to be of no
    use to us.)

    Main issue: this neat separation isn't really possible, because e.g.
    whether we interpret {lo broda be da} as a function or as a constant
    depends on whether {da} is already bound when the term appears.

    So... how to handle {da .e ko'a lo broda be da brode}? Or {ge broda da gi
    brode vau lo brodi be da}, or equiv {broda da gi'e brode ko'a vau lo brodi
    be da}?

    Suggested simple solution: {lo broda be da} with unbound {da} is an error.
    {lo broda be su'o da} is fine, though.

    So {lo broda be da}, or {lo broda be ri}, or even {lo broda be ko'a}, is
    in interpreted in the first place as a discourse referent *function*,
    about which we know that every value satisfies broda(f(x),x). At first we
    have no information on its domain - that comes by looking at the possible
    values of {da/ri/ko'a} when it's actually used. Anaphora can never be
    bound to such functions, only their values.

Giheks, geks, and tailterms:
    Xorxes convinced me to change the handling of giheks to parallel eks
    rather than ijeks, but I'm not sure I'm happy about this. They feel more
    afterthoughty to me. The only issue with treating them as such is
    tailterms.

    To quote myself:
    """
    I can't deny that there's something fairly horrible about {broda gi'e
    brode vau na ku} ending up as equivalent to {broda gi'e brode}...

    I see one other possible approach: interpret the connected tail terms of
    a connected briditail once, but have any resulting sumti be appended to
    both bridi. That would sole the {vau na ku} and {vau PA da} uglinesses,
    and I don't see any theoretical problems with it. It would, however,
    complicate the code quite a bit, suggesting that it isn't very natural.
    """

    A more critical problem than coding difficulties: {broda da gi'e brode vau
    de} surely shouldn't have the {da} scoping over the {de}. Surely?

    Or maybe it should... an alternative would be to consider a gek or a gihek
    as analagous to a *jek* - producing a relation which we then consider an
    atom for scope purposes. This does make its own sense - a gekSentence sans
    its tailterms does have the feel of an independent unit.

    No, that's ridiculous.

    I've decided to switch back to the original behaviour - we handle
    tailterms with extendTail, then handle them analogously to ijeks. My
    reasoning: giheks ought to be analogous to ijeks, being afterthought; the
    extendTail handling of tailterms is the only sensible one I can find, and
    has the advantage of being conceptually very simple.

    FIXME: rethink this in light of my tag-forced change in ijek handling (I
    expect we now find that xorxes was right)

Quantifier scope in tanru units:
    Can we use {ko'a mecrai pilji be ro ko'e} for "ko'a is the least common
    multiple of (the referents of) ko'e"?

Tags:
    I think it would be healthiest to sort out tags *before* "discourse
    referents" and "illocution" and such higher gubbins - because if our
    current scope handling needs to be overhauled to handle tags, we'd best
    know about it now. I hope it doesn't need to be.

    We have three kinds of tags to deal with:
	selbri tags
	term tags
	tagged connectives

    SELBri and term tags are to be handled analogously to NA, and pose no real
    issue.

    For tag connectives: recall that {ba gi broda gi brode} does two things:
    it claims that an event ko'a of broda occurs, and it claims that an event of
    brode occurs ba ko'a. Since this claim can occur deep within the logical
    structure of a statement, we should think of these as truth conditions
    rather than anything merely illocutionary, and should represent it in our
    logic. I think the best way to do that may actually be to simply copy the
    {[stag] gi P gi Q} construction from lojban, its semantics being those
    just described.

    (But don't let's forget the whole ugly issue with modal-tense asymmetry
    here... we don't want to copy the lojban *too* faithfully...)

    So we seem to want to complicate the logic in two ways: firstly by adding
    modal operators, and secondly by adding modal connectives.

    What about e.g {broda .i JA ba bo brode}? I think the most natural rule
    is to say that the {ba} is adding an extra condition to the case that both
    connectunts are true, and has no effect in the other cases - because
    there's no claimed event to test the tense condition on. Amazingly, this
    is all-but specified in the CLL - see 10.17.10.

    But it seems we do have to understand {na pu broda .i ba bo brode} as making
    the tense claim {le nu brode cu balvi le nu na pu broda} - though what the
    truth conditions for that are, I'm not sure.

    Examples it would be nice to have work:
    {mi na.a ba bo do klama} ~= "if I go, you'll go"
    {mi u mu'i nai bo do krici} ~= "I believe [it], not motivated by any belief
	[in it] of yours"


    So it looks like there's no issue. If we can handle {na broda} and {naku}
    and {je}, then we can handle tags. Of course, giving semantics to the
    resulting logic is another issue...

    One problem, actually: 10.13.7 mandates {pu broda baku} == {puba broda}.
    So we're forced to equate {pu broda} with {pu ku broda}. So we're forced
    to export it to the prenex. But then everything falls apart; we're
    inconsistent with many of the examples in the book - e.g. 14.18.1. Arse.

    OK. So xorxes is right and I am wrong. Unsurprisingly. Tags and negation
    are *bridi* operators, not statement operators. Is it possible to
    reconcile this with the CLL's insistence that quantifiers do span a
    statement? Not if we want negation to interact properly with both
    quantifiers and tags.


Tense, Events and Davidson:
    Davidson, translated: {broda} claims {da nu broda}.
    Then {pu ko'a broda} claims {su'o nu broda gi'e purci ko'a},
    {broda i ba bo brode} claims {su'o nu broda cu se balvi su'o nu brode},
    etc.

    This doesn't literally work, of course, as probably we have da nu broda
    and de nu na broda for every broda.

    In {ko'a ckaji lo ka broda}, we can tag both {ckaji} and {broda}... with
    what results? What are the meanings when untagged?

    Clearly du'us often do refer to actions, even when no tag makes it
    explicit; hence the same goes for kas.

    What exactly is the difference between a nu and a du'u, other than some
    predicates accepting only one of them? Crucial difference: there's only
    one du'u broda, but generally many nu broda. Though I wonder if that isn't
    just malgli...

Eventual interaction with a theorem prover:
    http://www.eprover.org/ looks good


The true horror of CLL lojban:
	ro da na broda .i je da brode
    seems forced by the rules on the scopes of na and da to come out as
	na ku ro da zo'u ge da broda gi da brode
    , so the rule has to be that a na gets shifted to the outside of the
    statement prenex - which is counterintuitive to say the least.

    Meanwhile, CLL rules force tenses to *not* be exported to the statement
    prenex, but rather (effectively) to a (non-existent (but see 16.10.5,6))
    sentence prenex, in order.

    I see no actual contradiction, but it's pretty horrible.

    Furthermore, according to 16.10, sumti connectives parallel variables, and
    we seem forced to render
	mi .e do broda ro da .ije da brode
    as
	ge ro da zo'u ge mi broda da gi da brode
	gi ro da zo'u ge do broda da gi da brode
    which is furtherly horrible.

    Given all of which, I believe we should GIVE UP on slavishly implementing
    CLL's bugs, and instead give a sensible semantics.

    Clearly, that means xorxes' semantics. So {na broda} is interchangeable
    with {na ku broda}; sentences have prenexes (semantically whether or not
    grammatically); giheks work like geks, as does everything else; Cont isn't
    needed (!).

2014 rewrite:
    Aims:
	Simplify code, in particular dropping continuations, at cost of
	slavish CLL-support.

	Handle weak donkey anaphora.

	Prepare to handle illocution and side-assumptions.

    donkeys:
	to handle {ri} correctly, we can't handle quantification with
	functions.

	We need to clearly distinguish "monadic" bindings of sumbasti, like ri
	and ko'a, from parse-respecting bindings of variables, like da and
	ke'a. As an organising principle, I suggest:

	    Use monads *only* for parse-disrespecting structure
		(e.g. sumbasti, noi clauses, xorlo etc).

	In particular, we must handle variables as follows:
	    pass down variable bindings as an explicit argument;
	    use a monad to obtain a fresh variable each time;
	    allow sumbasti to bind to variables;
	    have use of a sumbasti bound to an unbound variable be an error.
	
	This way, we handle things like
	    {ro prenu prami py} == {ro prenu goi ko'a prami ko'a}
	    {ga prami lo xirma gi cliva ri} == {prami gi'a cliva vau lo xirma}
	while considering as errors true donkeys like
	    {ro cange poi ponse su'o xasli cu darxi ri}.

	We should also handle logically connected sumti as variables, so we
	correctly disallow the donkey
	    {mi .e do vu'o goi ko'a broda .i ko'a brode}
	.

    implicit vars:
	at the top of the NU/poi: get the Prop, check inside it for an
	instance of the variable; if find none, replace first ZoheTerm in each
	Rel with it.

    connectives, terms, and xorlo:
	if we really want to implement xorlo properly, then we do not want to
	make the mistake of thinking
	    {ko'a .e ko'e lo broda cu brode}
	is equivalent to
	    {ge ko'a lo broda cu brode gi ko'e lo broda cu brode}
	, because under xorlo it isn't.

	Handling logically connected sumti with variables deals with this.

    tailterms:
	similar problem with
	    {broda gi'e broda vau lo brodi}
	, complicated by wanting the gihek to scope over quantified tail
	terms.

	The correct solution is, of course, the same: use a relation
	variable!

	Recall that a pro-bridi (e.g. {go'i}) comes with an arglist. Normally
	it's set at 1; the only difference here is that the arglist is set
	wherever it ended up.

	So let's put full pro-bridi support in right now, in analogy with the
	pro-sumti support?

	Basic problem: tailterms are parse-disrespecting monstrosities.

	e.g. unclear what to do with
	    {ge ro da zo'u broda da gi ro da zo'u brode da vau da da}
	On the one hand, clearly the final da can't be in the scope of either roda.
	On the other hand, we're under fairly clear instructions to equate
	    {ge pu broda gi ca brode vau baku}
	with
	    {ge puba broda gi caba brode}

	Solution: parsing a term results (effectively) in
	    (Prop -> Prop, Maybe Arg, Bindings -> Bindings)
	(along with anaphoric bindings, side-assumptions etc).
	The Bindings here are purely parse-respecting, and are just for the da-series.
	Arg is a JboTerm maybe tagged with a numerical FA position (or a modal?).
	This return value is used as follows:
	    The Prop map is applied with mapCont;
	    The Bindings are applied scope-respectingly;
	    Any Arg is added to the list (unless in prenex).
	Here we use continuations (sorry!) to ensure that the Prop map and any
	Arg are applied to the correct bridis.

	Using Cont really is very natural here.

	So this gives
	    {ge ro da zo'u broda da gi ro da zo'u brode da vau da da}
	==
	    {ge ro da su'o de zo'u broda da de de gi ro da su'o de zo'u brode da de de}

